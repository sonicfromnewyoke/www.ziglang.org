---
.title = "Приклади",
.author = "",
.date = @date("2024-08-07:00:00:00"),
.layout = "page.shtml",
.custom = {
	"mobile_menu_title": "Приклади",
	"toc": true,
},
---

# [Виклик функцій зовнішньої бібліотеки]($heading.id('ext'))
Таким чином можна викликати всі функції системного API, вам не потрібні бібліотечні прив’язки для взаємодії з ними.

[]($code.language('=html').buildAsset("samples/0-windows-msgbox.zig"))

# [Виявлення витоків пам'яті]($heading.id('leak'))
За допомогою `std.heap.GeneralPurposeAllocator` ви можете відстежувати подвійне звільнення та витік пам'яті.

[]($code.language('=html').buildAsset("samples/1-memory-leak.zig"))


# [Сумісність з C]($heading.id('c-interop'))
Приклад імпорту файлу заголовка C і компонування з libc і raylib.

[]($code.language('=html').buildAsset("samples/2-c-interop.zig"))


# [Zigg Zagg]($heading.id('zigg-zagg'))
Zig *оптимізований* для проходження код-інтерв’ю (не зовсім).

[]($code.language('=html').buildAsset("samples/3-ziggzagg.zig"))


# [Узагальнені типи]($heading.id('generic'))
У Zig типи є значеннями comptime, і ми використовуємо функції, які повертають тип для реалізації загальних алгоритмів і структур даних. У цьому прикладі ми реалізуємо просту узагальнену чергу та перевіримо її поведінку.

[]($code.language('=html').buildAsset("samples/4-generic-type.zig"))


# [Використання cURL з середини Zig]($heading.id('curl'))

[]($code.language('=html').buildAsset("samples/5-curl.zig"))